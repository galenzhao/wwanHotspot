#!/bin/sh /etc/rc.common

#  wwanHotspot
#
#  Wireless WAN Hotspot management application for OpenWrt routers.
#  $Revision: 1.26 $
#
#  Copyright (C) 2017-2018 Jordi Pujol <jordipujolp AT gmail DOT com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3, or (at your option)
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#************************************************************************

START=99
USE_PROCD=1
#PROCD_DEBUG=1
EXTRA_COMMANDS="scan status"
EXTRA_HELP=$'\t'"scan"$'\t'"Scan now"$'\n\t'"status"$'\t'"Status"

NAME="wwanHotspot"
PROG="/usr/sbin/${NAME}"
INIT="/etc/init.d/${NAME}"
PIDFILE="/var/run/${NAME}.pid"

_ps_children() {
	local p
	for p in $(pgrep -P "${1}"); do
		echo "${p}"
		_ps_children "${p}"
	done
}

_wwan_network() {
	local i=-1 m
	while [ $((i++)) ] && \
	m="$(uci -q get wireless.@wifi-iface[${i}].mode)"; do
		[ "${m}" = "sta" ] || \
			continue
		uci -q get wireless.@wifi-iface[${i}].network
		return 0
	done
	echo "Error: Can't find the STA interface" >&2
	return 1
}

service_running() {
	local pid

	pid="$(cat "${PIDFILE}" 2> /dev/null)" && \
	grep -Fqse "${PROG}" "/proc/${pid}/cmdline" && \
	echo "${pid}"
}

start_service() {
	service_running > /dev/null && \
		echo "Warning: Daemon is already running" >&2 || \
		echo "Info: Starting Daemon..." >&2
	_wwan_network > /dev/null || \
		return 1
	procd_open_instance
	procd_set_param command "${PROG}" "start"
	procd_set_param pidfile "${PIDFILE}"
	procd_close_instance
}

stop_service() {
	local pid

	if ! pid="$(service_running)"; then
		echo "Error: Daemon is not running" >&2
		return 1
	fi
	echo "Info: Stopping Daemon..." >&2
	local pids="${pid} $(_ps_children "${pid}")"
	kill -TERM ${pids} > /dev/null 2>&1 &
	local try=0
	while kill -0 ${pids} > /dev/null 2>&1 && \
	[ $((try++)) -lt $SERVICE_STOP_TIME ]; do
		sleep 1
	done
	! kill -0 ${pids} > /dev/null 2>&1 || \
		kill -INT ${pids} > /dev/null 2>&1 &
	wait || :
}

service_triggers() {
	local ifaces="wan $(_wwan_network)"
	local n

	procd_open_trigger
	for n in ${ifaces}; do
		procd_add_interface_trigger "interface.*" "${n}" "${INIT}" scan
	done
	procd_add_config_trigger "config.change" "${NAME}" "${INIT}" reload
	procd_close_trigger
}

reload_service() {
	local pid

	if ! pid="$(service_running)"; then
		echo "Error: Daemon is not running" >&2
		return 1
	fi
	echo "Info: Reloading Daemon config" >&2
	#procd_send_signal "${NAME}"
	kill -HUP $pid || :
}

scan() {
	local pid

	if ! pid="$(service_running)"; then
		echo "Error: Daemon is not running" >&2
		return 1
	fi
	echo "Info: Requesting an scan to daemon" >&2
	#procd_send_signal "${NAME}" "*" "USR1"
	kill -USR1 $pid || :
}

status() {
	local pid

	if ! pid="$(service_running)"; then
		echo "Daemon is not running" >&2
		return 1
	fi
	echo "Daemon is running in process ${pid}" >&2
	kill -USR2 $pid || :
}
