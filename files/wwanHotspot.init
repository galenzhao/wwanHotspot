#!/bin/sh /etc/rc.common

#  wwanHotspot
#
#  Wireless WAN Hotspot management application for OpenWrt routers.
#  $Revision: 1.34 $
#
#  Copyright (C) 2017-2018 Jordi Pujol <jordipujolp AT gmail DOT com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3, or (at your option)
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#************************************************************************

START=99
USE_PROCD=1
#PROCD_DEBUG=1
#INIT_TRACE="y"
EXTRA_COMMANDS="network scan status"
EXTRA_HELP=$'\t'"scan"$'\t'"Scan now"\
$'\n\t'"status"$'\t'"Update status report"\
$'\n\t'"running"$'\t'"Check if daemon is active"

${INIT_TRACE:+set -x}

NAME="$(basename "${initscript}")"
PROG="/usr/sbin/${NAME}"
INIT="/etc/init.d/${NAME}"
PIDFILE="/var/run/${NAME}.pid"
SERVICE_SIG_STOP="INT"
SERVICE_SIG_RELOAD="HUP"
SERVICE_SIG_SCAN="USR1"
SERVICE_SIG_STATUS="USR2"
SERVICE_SIG_NETWORK="ALRM"

_ps_children() {
	local p
	for p in $(pgrep -P "${1}"); do
		echo "${p}"
		_ps_children "${p}"
	done
}

_wwan_network() {
	local i=-1 m
	while [ $((i++)) ] && \
	m="$(uci -q get wireless.@wifi-iface[${i}].mode)"; do
		[ "${m}" = "sta" ] || \
			continue
		uci -q get wireless.@wifi-iface[${i}].network
		return 0
	done
	echo "Error: Can't find the STA interface" >&2
	return 1
}

_pids_active() {
	local p rc=1
	for p in "${@}"; do
		if kill -s 0 ${p} > /dev/null 2>&1; then
			echo ${p}
			rc=0
		fi
	done
	return ${rc}
}

service_pid() {
	local pid
	pid="$(cat "${PIDFILE}" 2> /dev/null)" && \
	grep -qsF "${PROG}" "/proc/${pid}/cmdline" && \
	kill -s 0 ${pid} > /dev/null 2>&1 && \
	echo "${pid}"
}

service_running() {
	if ! pid="$(service_pid)"; then
		echo "Error: Daemon is not running" >&2
		return 1
	fi
	echo "Info: Daemon is running in process ${pid}" >&2
}

start_service() {
	service_pid > /dev/null && \
		echo "Warning: Daemon is already running" >&2 || \
		echo "Info: Starting Daemon..." >&2
	_wwan_network > /dev/null || \
		return 1
	procd_open_instance
	procd_set_param command "${PROG}" "start"
	procd_set_param pidfile "${PIDFILE}"
	procd_close_instance
}

stop_service() {
	local pid try=0
	service_running || \
		return 1
	echo "Info: Stopping Daemon..." >&2
	local pids="${pid} $(_ps_children "${pid}")"
	kill -s "${SERVICE_SIG_STOP}" ${pid} > /dev/null 2>&1
	while kill -s 0 ${pid} > /dev/null 2>&1 && \
	[ $((try++)) -lt ${SERVICE_STOP_TIME} ]; do
		sleep 1
	done
	! pids="$(_pids_active ${pids})" || \
		kill -s "KILL" ${pids} > /dev/null 2>&1
}

service_triggers() {
	local ifaces="wan $(_wwan_network)"
	local n
	procd_open_trigger
	for n in ${ifaces}; do
		procd_add_interface_trigger "interface.*" "${n}" "${INIT}" network
	done
	procd_add_config_trigger "config.change" "${NAME}" "${INIT}" reload
	procd_add_config_trigger "config.change" "network" "${INIT}" reload
	procd_close_trigger
}

reload_service() {
	local pid
	service_running || \
		return 1
	echo "Info: Reloading configuration files" >&2
	kill -s "${SERVICE_SIG_RELOAD}" ${pid} || :
}

network() {
	local pid
	service_running || \
		return 1
	echo "Info: Advertising daemon of a network status change" >&2
	kill -s "${SERVICE_SIG_NETWORK}" ${pid} || :
}

scan() {
	local pid
	service_running || \
		return 1
	echo "Info: Requesting an scan to daemon" >&2
	kill -s "${SERVICE_SIG_SCAN}" ${pid} || :
}

status() {
	local pid
	service_running || \
		return 1
	echo "Info: Requesting an status report update to daemon" >&2
	kill -s "${SERVICE_SIG_STATUS}" ${pid} || :
}
